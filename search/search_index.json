{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"evid - pdf labeller","text":"<p><code>evid</code> is a GUI application for labelling text from PDF files, aimed at the legal industry.  With <code>evid</code> you can label snippets and add remarks on read-through, which will then be citable in Typst documents. </p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>PDF Logging: Add PDFs with metadata such as title, authors, tags, and dates.</li> <li>Automatic Date Extraction: Extract dates from PDFs using advanced text parsing.</li> <li>PyQt6 GUI: Intuitive interface with tabs for adding and browsing documents.</li> <li>Typst Integration: Generate Typst documents for labels and responses, with BibTeX support for citations.</li> <li>Modular Database: Organize documents into datasets with YAML-based metadata storage.</li> <li>CLI Support: Manage datasets and evidence through a powerful command-line interface.</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Type <code>evid</code> to open the GUI or start from CLI help: </p> <ul> <li>Installation Guide: Set up <code>evid</code> on your system.</li> <li>Usage Guide: Learn how to add, browse, and manage documents.</li> <li>Development: Contribute to <code>evid</code> or extend its functionality.</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>uv pip install https://github.com/evidlabel/evid.git\nevid\n</code></pre>"},{"location":"development/","title":"Development Guide","text":"<p>This guide is for developers looking to contribute to or extend <code>evid</code>, a tool for managing PDF documents with metadata and labels.</p>"},{"location":"development/#project-structure","title":"Project Structure","text":"<pre><code>evid/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 evid/\n\u2502   \u2502   \u251c\u2500\u2500 core/           # Core functionality (database, date extraction, Typst)\n\u2502   \u2502   \u251c\u2500\u2500 gui/            # PyQt6 GUI components\n\u2502   \u2502   \u251c\u2500\u2500 cli/            # Command-line interface modules\n\u2502   \u2502   \u2514\u2500\u2500 __init__.py     # Package metadata\n\u251c\u2500\u2500 tests/                  # Unit tests\n\u251c\u2500\u2500 docs/                   # MkDocs documentation\n\u251c\u2500\u2500 .github/workflows/      # CI pipeline\n\u251c\u2500\u2500 pyproject.toml          # Project configuration\n\u251c\u2500\u2500 README.md               # Project overview\n\u2514\u2500\u2500 mkdocs.yml              # MkDocs configuration\n</code></pre>"},{"location":"development/#setting-up-for-development","title":"Setting Up for Development","text":"<ol> <li>Clone and Install:</li> </ol> <pre><code>git clone &lt;repository-url&gt;\ncd evid\nuv pip install .\n</code></pre> <p>This installs <code>evid</code> and its dependencies using <code>uv</code>.</p> <ol> <li>Run Tests:</li> </ol> <pre><code>pytest\n</code></pre> <p>Tests cover date extraction, GUI components, Typst generation, and database functionality.</p>"},{"location":"development/#contributing","title":"Contributing","text":"<ol> <li>Fork and Branch:</li> <li> <p>Fork the repository and create a feature branch: <code>git checkout -b feature/your-feature</code>.</p> </li> <li> <p>Code Style:</p> </li> <li>Follow PEP 8 for Python code.</li> <li>Use type hints where applicable (see <code>src/evid/core/</code> for examples).</li> <li> <p>Add docstrings for public functions and classes.</p> </li> <li> <p>Add Tests:</p> </li> <li>Add unit tests in the <code>tests/</code> directory for new functionality.</li> <li> <p>Use <code>pytest</code> fixtures for setup (e.g., <code>temp_pdf</code> in <code>test_dateextract.py</code>).</p> </li> <li> <p>Update Documentation:</p> </li> <li>Modify <code>docs/</code> files for new features or changes.</li> <li>Preview documentation locally:</li> </ol> <pre><code>mkdocs serve\n</code></pre> <ol> <li>Submit a Pull Request:</li> <li>Push your branch and create a PR against the <code>main</code> branch.</li> <li>Ensure the CI pipeline passes (runs <code>pytest</code> on Ubuntu with Python 3.11).</li> </ol>"},{"location":"development/#extending-evid","title":"Extending evid","text":"<ul> <li>New GUI Tabs: Add new classes in <code>src/evid/gui/tabs/</code> and register them in <code>src/evid/gui/main.py</code>.</li> <li>Custom Metadata: Extend <code>info.yml</code> fields in <code>src/evid/gui/tabs/add_evidence.py</code>.</li> <li>Typst Templates: Modify templates in <code>src/evid/core/label_setup.py</code> or <code>src/evid/core/rebut_doc.py</code>.</li> <li>CLI Commands: Add new commands in <code>src/evid/cli/</code> by extending the <code>main.py</code> Click group.</li> </ul> <p>For issues or feature requests, check the repository's issue tracker.</p>"},{"location":"installation/","title":"Installation","text":"<p>This guide covers how to install <code>evid</code> on your system using <code>uv</code>, the recommended tool for dependency management. For Windows users, we also provide instructions for setting up <code>evid</code> using Windows Subsystem for Linux (WSL2), which is recommended for a smoother experience with GUI and Typst features.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python: Version 3.11 or higher (but less than 4.0).</li> <li>uv: For dependency management and installation.</li> <li>Git: To clone the repository and enable optional Git-based version control for datasets.</li> <li>Optional: Typst for generating Typst documents.</li> <li>For WSL2 (Windows): A Linux distribution (e.g., Ubuntu) installed via WSL2, plus additional system dependencies for GUI support.</li> </ul>"},{"location":"installation/#installation-options","title":"Installation Options","text":"<p>Choose one of the following installation methods based on your operating system:</p> <ul> <li>Standard Installation (Linux, macOS, or Windows with native Python)</li> <li>WSL2 Installation (Recommended for Windows users)</li> </ul>"},{"location":"installation/#standard-installation","title":"Standard Installation","text":"<p>These steps work for Linux, macOS, or Windows (if using native Python without WSL2).</p> <ol> <li>Clone the Repository</li> </ol> <pre><code>git clone &lt;repository-url&gt;\ncd evid\n</code></pre> <ol> <li>Install uv</li> </ol> <p>If you don't have <code>uv</code> installed, run:</p> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <p>Ensure <code>uv</code> is in your PATH. On Linux/macOS, you may need to add:</p> <pre><code>export PATH=\"$HOME/.cargo/bin:$PATH\"\n</code></pre> <p>On Windows (without WSL2), <code>uv</code> is typically added to your PATH automatically, but you can verify by running <code>uv --version</code> in a Command Prompt.</p> <ol> <li>Install System Dependencies (Linux/macOS)</li> </ol> <p>For Linux, install the following dependencies to support the GUI and optional Git features:</p> <pre><code>sudo apt update\nsudo apt install -y git python3 python3-pip python3-dev qt6-base-dev libx11-xcb1 libxcb-cursor0 libegl1 libxkbcommon-x11-0 libxcb-xinerama0 libxcb-xinput0 libfontconfig1 libgl1 libglu1-mesa libopengl0 libxcb-glx0\n</code></pre> <p>For macOS, use Homebrew to install Git:</p> <pre><code>brew install git\n</code></pre> <p>Note: Some Qt6 dependencies may require additional setup on macOS; consult the PyQt6 documentation if issues arise.</p> <ol> <li>Install Dependencies</li> </ol> <p>Use <code>uv</code> to install all required dependencies:</p> <pre><code>uv pip install .\n</code></pre> <p>This installs <code>evid</code> and dependencies like <code>PyQt6</code>, <code>pymupdf</code>, <code>pyyaml</code>, and <code>gitpython</code> (for optional Git support).</p> <ol> <li>Verify Installation</li> </ol> <p>Run the application to ensure it launches:</p> <pre><code>evid\n</code></pre> <p>This should open the <code>evid</code> GUI with a dark theme.</p>"},{"location":"installation/#wsl2-installation-for-windows","title":"WSL2 Installation for Windows","text":"<p>For Windows users, we recommend using Windows Subsystem for Linux (WSL2) to run <code>evid</code>. WSL2 provides a Linux environment that simplifies GUI and Typst support. These instructions are designed for beginners who have never used WSL2 before.</p>"},{"location":"installation/#step-1-set-up-wsl2","title":"Step 1: Set Up WSL2","text":"<ol> <li>Enable WSL2:</li> <li>Open the Windows Start menu, search for \"Turn Windows features on or off,\" and open it.</li> <li>Scroll down, check the boxes for \"Windows Subsystem for Linux\" and \"Virtual Machine Platform,\" then click OK.</li> <li> <p>Restart your computer when prompted.</p> </li> <li> <p>Install a Linux Distribution:</p> </li> <li>Open the Microsoft Store app on Windows.</li> <li>Search for \"Ubuntu\" and install \"Ubuntu 20.04 LTS\" (or the latest version available).</li> <li> <p>Launch Ubuntu from the Start menu. It will take a few minutes to set up, and you'll be asked to create a username and password (e.g., username: <code>user</code>, password: <code>yourpassword</code>). Remember these credentials.</p> </li> <li> <p>Update WSL2:</p> </li> <li>Open a Windows Command Prompt (search for \"cmd\" in the Start menu).</li> <li>Run the following command to ensure WSL2 is set as the default: <pre><code>wsl --set-default-version 2\n</code></pre></li> <li>Verify the installation by running <code>wsl --list --verbose</code> in the Command Prompt. You should see Ubuntu listed with \"2\" as the version.</li> </ol>"},{"location":"installation/#step-2-install-an-x-server-for-gui-support","title":"Step 2: Install an X Server for GUI Support","text":"<p>To display the <code>evid</code> GUI in WSL2, you need an X server on Windows to handle Linux GUI applications.</p> <ol> <li>Install VcXsrv:</li> <li>Download VcXsrv from SourceForge (click the green \"Download\" button).</li> <li> <p>Run the installer, choosing default options, and complete the installation.</p> </li> <li> <p>Configure VcXsrv:</p> </li> <li>Launch \"XLaunch\" from the Start menu (installed with VcXsrv).</li> <li>In the XLaunch wizard:</li> <li>Select \"Multiple windows\" and click Next.</li> <li>Select \"Start no client\" and click Next.</li> <li>Check \"Disable access control\" (important for WSL2) and click Next.</li> <li>Click Finish to start the X server. A small icon will appear in your system tray.</li> <li>Keep XLaunch running whenever you use <code>evid</code>'s GUI.</li> </ol>"},{"location":"installation/#step-3-install-system-dependencies-in-ubuntu","title":"Step 3: Install System Dependencies in Ubuntu","text":"<ol> <li>Open Ubuntu:</li> <li> <p>Launch Ubuntu from the Start menu or run <code>wsl</code> in a Windows Command Prompt.</p> </li> <li> <p>Update Ubuntu:</p> </li> <li>Run the following commands to update the package lists and installed packages: <pre><code>sudo apt update\nsudo apt upgrade -y\n</code></pre></li> <li> <p>Enter your Ubuntu password when prompted.</p> </li> <li> <p>Install Required Dependencies:</p> </li> <li>Install the system dependencies needed for <code>PyQt6</code> and GUI functionality, plus Git for version control: <pre><code>sudo apt install -y git python3 python3-pip python3-dev qt6-base-dev libx11-xcb1 libxcb-cursor0 libegl1 libxkbcommon-x11-0 libxcb-xinerama0 libxcb-xinput0 libfontconfig1 libgl1 libglu1-mesa libopengl0 libxcb-glx0\n</code></pre></li> <li> <p>These packages ensure that the GUI and graphical components work correctly in WSL2.</p> </li> <li> <p>Optional: Install Typst:</p> </li> <li>To generate Typst documents (e.g., for labels and rebuttals), install Typst: <pre><code>sh -c \"$(curl --proto '=https' --tlsv1.2 -sSf https://sh.typst.app)\"\n</code></pre></li> <li>Note: This is a small installation compared to full LaTeX distributions.</li> </ol>"},{"location":"installation/#step-4-clone-and-install-evid","title":"Step 4: Clone and Install evid","text":"<ol> <li>Clone the Repository:</li> <li> <p>In the Ubuntu terminal, clone the <code>evid</code> repository: <pre><code>git clone &lt;repository-url&gt;\ncd evid\n</code></pre></p> </li> <li> <p>Install uv:</p> </li> <li>Install <code>uv</code> in the Ubuntu environment: <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre></li> <li>Add <code>uv</code> to your PATH by adding this line to your <code>~/.bashrc</code>: <pre><code>echo 'export PATH=\"$HOME/.cargo/bin:$PATH\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre></li> <li> <p>Verify <code>uv</code> is installed by running: <pre><code>uv --version\n</code></pre></p> </li> <li> <p>Install Dependencies:</p> </li> <li>Install <code>evid</code> dependencies using <code>uv</code>: <pre><code>uv pip install .\n</code></pre></li> </ol>"},{"location":"installation/#step-5-configure-gui-display","title":"Step 5: Configure GUI Display","text":"<ol> <li>Set the DISPLAY Environment Variable:</li> <li>In the Ubuntu terminal, add the following line to your <code>~/.bashrc</code> to configure the display for GUI applications: <pre><code>echo 'export DISPLAY=$(ip route list default | awk \"{print \\$3}\" | head -1):0' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre></li> <li>This sets the DISPLAY variable to point to your Windows X server.</li> </ol>"},{"location":"installation/#step-6-verify-installation","title":"Step 6: Verify Installation","text":"<ol> <li>Ensure XLaunch is Running:</li> <li> <p>Make sure XLaunch (VcXsrv) is running on Windows (check for the system tray icon).</p> </li> <li> <p>Run evid:</p> </li> <li>In the Ubuntu terminal, from the <code>evid</code> directory, run: <pre><code>evid\n</code></pre></li> <li>The <code>evid</code> GUI should appear on your Windows desktop with a dark theme.</li> </ol>"},{"location":"installation/#troubleshooting-wsl2","title":"Troubleshooting WSL2","text":"<ul> <li>GUI Doesn't Appear: Ensure XLaunch is running and the <code>DISPLAY</code> variable is set correctly. Try restarting XLaunch and running <code>export DISPLAY=:0</code> in the Ubuntu terminal.</li> <li>Dependency Errors: If <code>uv pip install</code> fails, ensure all system dependencies were installed (<code>qt6-base-dev</code>, <code>git</code>, etc.). Re-run <code>sudo apt install</code> for missing packages.</li> <li>Slow Performance: Ensure your WSL2 instance has enough memory (check via <code>wsl --list --verbose</code>). You can allocate more resources in a <code>.wslconfig</code> file (search online for WSL2 performance tuning).</li> <li>Typst Issues: If Typst documents fail to generate, verify that Typst is installed or install it as needed.</li> </ul>"},{"location":"installation/#troubleshooting-general","title":"Troubleshooting (General)","text":"<ul> <li>uv errors: Ensure Python 3.11+ is installed and <code>uv</code> is correctly configured. Try <code>uv python use 3.11</code> if <code>uv</code> uses the wrong Python version.</li> <li>Missing Typst: If Typst documents fail to generate, install Typst (included in WSL2 instructions above).</li> <li>GUI issues: Verify that <code>PyQt6</code> is installed correctly. Check for Qt-related errors in the terminal output. For WSL2, ensure the X server is running.</li> </ul> <p>For further help, check the Development section or file an issue on the repository.</p>"},{"location":"usage/","title":"Usage Guide","text":"<p>This guide explains how to use <code>evid</code> to manage PDF documents through its PyQt6-based GUI or command-line interface (CLI).</p>"},{"location":"usage/#configuration","title":"Configuration","text":"<p>You can configure the default database location by creating a <code>~/.evidrc</code> file in YAML format. Example:</p> <pre><code>default_dir: ~/my_custom_evid_db\n</code></pre> <p>If no <code>.evidrc</code> file is found, the default database location is <code>~/Documents/evid</code>. Alternatively, you can specify a custom directory when running CLI commands using the <code>--directory</code> or <code>-d</code> option.</p>"},{"location":"usage/#launching-the-application","title":"Launching the Application","text":"<p>Launch the GUI with:</p> <pre><code>evid [-d|--directory &lt;custom_dir&gt;]\n</code></pre> <p>This opens the GUI with two tabs: Add and Browse. The optional <code>-d</code> or <code>--directory</code> argument allows you to specify a custom database directory (e.g., <code>evid -d ~/my_evid_db</code>).</p> <p>Alternatively, use the CLI to view available commands:</p> <pre><code>evid --help\n</code></pre>"},{"location":"usage/#listing-datasets","title":"Listing Datasets","text":"<p>To see all available datasets, use the CLI:</p> <pre><code>evid list [-d|--directory &lt;custom_dir&gt;]\n</code></pre> <p>This displays a numbered list of existing datasets in the specified or default database location.</p>"},{"location":"usage/#managing-datasets","title":"Managing Datasets","text":""},{"location":"usage/#creating-datasets","title":"Creating Datasets","text":""},{"location":"usage/#via-gui","title":"Via GUI","text":"<p>In the Add tab, enter a new dataset name in the \"New Dataset\" field and click Create. If the dataset already exists, a warning will appear.</p>"},{"location":"usage/#via-cli","title":"Via CLI","text":"<p>Create a new dataset with:</p> <pre><code>evid set create &lt;dataset_name&gt; [-d|--directory &lt;custom_dir&gt;]\n</code></pre> <p>This creates a new dataset directory in the specified or default database location. If the dataset already exists, the command will fail with an error message.</p>"},{"location":"usage/#tracking-datasets-with-git","title":"Tracking Datasets with Git","text":"<p>To enable Git version control for a dataset, use:</p> <pre><code>evid set track [&lt;dataset_name&gt;] [-d|--directory &lt;custom_dir&gt;]\n</code></pre> <p>If no dataset name is provided, the CLI will prompt you to select an existing dataset. This command initializes a Git repository in the dataset's top-level directory with a <code>.gitignore</code> file that tracks only <code>label.bib</code>, <code>*.typ</code>, <code>info.yml</code>, <code>*.pdf</code>, and <code>*.txt</code> files, ignoring others (e.g., Typst byproducts like <code>label.pdf</code>). If the dataset is already a Git repository, the command will fail with an error message.</p>"},{"location":"usage/#generating-bibtex-files","title":"Generating BibTeX Files","text":"<p>To generate a BibTeX file from a <code>label.typ</code> file, use:</p> <pre><code>evid bibtex &lt;typ_file&gt; [-p|--parallel]\n</code></pre> <p>This command processes the specified <code>label.typ</code> file, generating a <code>label.bib</code> file in its respective directory. Use the <code>-p</code> or <code>--parallel</code> flag to process files concurrently (though currently supports single file). If no <code>typ_file</code> is provided, the command will display an error message. Errors are logged without stopping the process.</p> <p>Example:</p> <pre><code>evid bibtex path/to/label.typ -p\n</code></pre> <p>This generates a BibTeX file from the specified <code>label.typ</code> file.</p>"},{"location":"usage/#adding-documents","title":"Adding Documents","text":""},{"location":"usage/#via-gui_1","title":"Via GUI","text":"<p>Use the Add tab to log PDFs with metadata.</p> <ol> <li> <p>Select or Create a Dataset:</p> </li> <li> <p>Choose an existing dataset from the dropdown or enter a new dataset name and click Create.</p> </li> <li> <p>Datasets are folders in the default or specified database directory where documents are stored.</p> </li> <li> <p>Add a PDF:</p> </li> <li> <p>Click Browse to select a local PDF or enter a URL and click Quick Add URL.</p> </li> <li> <p>The GUI auto-fills metadata (title, authors, dates) from the PDF if possible.</p> </li> <li> <p>Fill Metadata:</p> </li> <li> <p>Edit fields like Title, Authors, Tags, Dates, Label, and URL.</p> </li> <li>Preview the metadata in the preview pane.</li> <li> <p>Note: Metadata fields like title and authors are stored as plain text in <code>info.yml</code> for readability, with Danish characters (\u00c3\u00a6, \u00c3\u00b8, \u00c3\u00a5) preserved.</p> </li> <li> <p>Save Document:</p> </li> <li> <p>Click Add to save the PDF and metadata to a unique folder in the selected dataset.</p> </li> <li>Metadata is stored in an <code>info.yml</code> file alongside the PDF.</li> </ol>"},{"location":"usage/#via-cli_1","title":"Via CLI","text":"<p>Add PDFs using the CLI with the following command:</p> <ul> <li>Add a PDF (from URL or local file):</li> </ul> <pre><code>evid add &lt;url_or_path&gt; [-s|--dataset &lt;dataset&gt;] [-l|--label] [-d|--directory &lt;custom_dir&gt;]\n</code></pre> <p>If <code>-s</code> or <code>--dataset</code> is not provided, the CLI prompts you to select an existing dataset. If the specified dataset does not exist, the command will fail with an error. The <code>add</code> command automatically detects whether the input is a URL (starting with <code>http://</code> or <code>https://</code>) or a local file path. After adding, it prints the metadata to stdout. Use <code>-l</code> or <code>--label</code> to open the labeler after adding the PDF. Use <code>-d</code> or <code>--directory</code> to specify a custom database directory.</p>"},{"location":"usage/#browsing-documents","title":"Browsing Documents","text":"<p>Use the Browse tab in the GUI to view and manage existing documents.</p> <ol> <li>Load a Dataset:</li> <li>Select a dataset from the dropdown and click Load.</li> <li> <p>The table displays metadata (Author, Title, Date, File Name, UUID) for each document entry.</p> </li> <li> <p>View Details:</p> </li> <li> <p>Select a row and click Open Dir to open the document folder in Visual Studio Code.</p> </li> <li> <p>Create Labels:</p> </li> <li>Select one or more entries (hold Ctrl or Shift to select multiple) and click Label Selected to generate Typst documents (<code>label.typ</code>) for each selected PDF.</li> <li>Each Typst file opens in a separate Visual Studio Code instance, allowing parallel editing without freezing the main application.</li> <li>Edit each Typst file in Visual Studio Code (Ctrl+L inserts a lb snippet) to add labels.</li> <li> <p>Upon closing the editor, the system extracts labels to JSON and generates <code>label.bib</code>.</p> </li> <li> <p>Generate BibTeX:</p> </li> <li>Select one or more entries and click Generate BibTeX to generate <code>label.bib</code> from <code>label.typ</code> for each selected entry.</li> <li> <p>This is useful for updating BibTeX files after edits to Typst files.</p> </li> <li> <p>Generate Responses:</p> </li> <li>Select an entry and click Rebut to create a response document (<code>rebut.typ</code>) using the BibTeX file.</li> <li>The response lists citations with notes, formatted in Typst, suitable for LLM integration.</li> </ol>"},{"location":"usage/#labelling","title":"Labelling","text":"<ul> <li> <p>When selecting one or more documents and pressing the \"Label Selected\" button, a Typst document is generated for each PDF containing the extracted text. The Typst documents are saved in the same folder as their respective PDFs and opened in Visual Studio Code for editing.</p> </li> <li> <p>The user can label using their text editor inside the Typst document. For VS Code, the following keybinding allows labelling by selecting text and pressing <code>ctrl+l</code>:</p> </li> </ul> <pre><code>    {\n        \"key\": \"ctrl+L\",\n        \"command\": \"editor.action.insertSnippet\",\n        \"when\": \"editorTextFocus &amp;&amp; editorLangId == 'typst'\",\n        \"args\": {\"snippet\": \"#lab(\\\"$1\\\",\\\"${TM_SELECTED_TEXT}\\\",\\\"$2\\\")\"}\n    }\n</code></pre> <p>The first field is the label attached (generally a short descriptive string), the second field is the text that was highlighted, and the third field is a comment about the label (for possible use by an LLM).</p> <ul> <li>After editing and saving the Typst file, upon closing the editor, the system runs a Typst query to extract labels into <code>label.json</code> and converts it to <code>label.bib</code>.</li> <li>You can also manually generate or update the <code>label.bib</code> by clicking \"Generate BibTeX\" in the Browse tab or using the <code>bibtex</code> CLI command.</li> <li>The <code>label.bib</code> files for each PDF can be concatenated and used to formulate a rebuttal.</li> <li>Note that the first 4 characters of the PDF's UUID are used as a prefix for the BibTeX label, ensuring labels only need to be unique within the same PDF, not across all PDFs in the dataset.</li> </ul>"},{"location":"usage/#via-cli_2","title":"Via CLI","text":"<p>Label an evidence in a dataset with:</p> <pre><code>evid label [-s|--dataset &lt;dataset&gt;] [-u|--uuid &lt;uuid&gt;] [-d|--directory &lt;custom_dir&gt;]\n</code></pre> <p>If <code>-s</code> or <code>--dataset</code> is not provided, the CLI prompts you to select a dataset. If <code>-u</code> or <code>--uuid</code> is not provided, the CLI prompts you to select an evidence from the dataset. This command generates and opens the label file for the specified evidence.</p>"},{"location":"usage/#initializing-configuration","title":"Initializing Configuration","text":"<p>To initialize or update the <code>.evidrc</code> configuration file with default settings, use:</p> <pre><code>evid rc\n</code></pre> <p>This command creates or updates <code>~/.evidrc</code> by adding missing fields from the default configuration, ensuring all required settings are present.</p>"},{"location":"usage/#tips","title":"Tips","text":"<ul> <li>Date Extraction: <code>evid</code> automatically extracts dates from PDFs in various formats (e.g., \"12/01/2023\", \"15. januar 2024\").</li> <li>Typst Setup: Ensure Typst is installed for label and response generation.</li> <li>VS Code Integration: Use the provided <code>.vscode/keybindings.json</code> for a Ctrl+L shortcut in Typst files.</li> <li>Git Tracking: After tracking a dataset with <code>evid set track</code>, use standard Git commands (<code>git add</code>, <code>git commit</code>, etc.) to manage changes to tracked files (<code>label.bib</code>, <code>*.typ</code>, <code>info.yml</code>, <code>*.pdf</code>, <code>*.txt</code>).</li> <li>Custom Directory: Use the <code>-d</code> or <code>--directory</code> option with CLI commands to work with datasets in a non-default location (e.g., <code>evid list -d ~/my_evid_db</code>).</li> </ul> <p>For development details, see the Development section.</p>"}]}