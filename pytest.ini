[pytest]
# Set verbosity level (minimal for LLM use)
log_cli = true
log_cli_level = ERROR
verbose = 0

# Configure error output
# Show minimal summary: failed (f), errors (e)
addopts = -rs --tb=no 
; -n auto

# Control output format
console_output_style = classic

# Enable multithreading by default
# Requires pytest-xdist plugin (pip install pytest-xdist)
; addopts = -n auto

# Specify where to save test logs
log_file = pytest.log
log_file_level = WARNING
log_file_format = %(asctime)s [%(levelname)8s] %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Prevent pytest from capturing output
capture = no

# Specify test file patterns
python_files = test_*.py
python_functions = test_*

# Markers for custom test categories
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: marks integration tests

; [pytest]
; # Set verbosity level (0=quiet, 1=default, 2=more verbose, etc.)
; log_cli = true
; log_cli_level = INFO
; verbose = 1

; # Configure error output
; # Show extra test summary info: passed (p), skipped (s), failed (f), errors (e)
; addopts = -ra --tb=short

; # Control output format
; console_output_style = progress

; # Specify where to save test logs
; log_file = pytest.log
; log_file_level = DEBUG
; log_file_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)
; log_file_date_format = %Y-%m-%d %H:%M:%S

; # Fail fast on first error
; # maxfail = 1

; # Prevent pytest from capturing output
; capture = no

; # Specify test file patterns
; python_files = test_*.py
; python_functions = test_*

; # Markers for custom test categories
; markers =
;     slow: marks tests as slow (deselect with '-m "not slow"')
;     integration: marks integration tests